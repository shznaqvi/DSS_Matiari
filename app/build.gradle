plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    // Add the Google services Gradle plugin
    id 'com.google.gms.google-services'
    // Add the Crashlytics Gradle plugin
    id 'com.google.firebase.crashlytics'
}

/*android {

    buildFeatures {
        dataBinding true
    }
    compileSdkVersion 32
    buildToolsVersion '31.0.0'

    Properties versionProps = new Properties()
    def versionPropsFile = file('version.properties')

    //Create a version properties file and add required properties with default values
    if (!versionPropsFile.exists()) {
        versionProps['VERSION_PATCH'] = "0"
        versionProps['VERSION_BUILD'] = "0"
        versionProps['VERSION_NUMBER'] = "0"

        Writer writer = new FileWriter(versionPropsFile, false)
        versionProps.store(versionPropsFile.newWriter(), null)
    }

    // Read existing
    if (versionPropsFile.canRead()) {
        versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def value = 0
        def versionType = "D"


        def runTasks = gradle.startParameter.taskNames
        if ('assemble' in runTasks || ':app:assembleRelease' in runTasks || 'aR' in runTasks) {
            value = 1
            versionType = "R"
        }

        def versionNumber = 2
        //  def versionMinor = 0
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + value
        def versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
        //def versionNumber = versionProps['VERSION_NUMBER'].toInteger() + value

        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps['VERSION_NUMBER'] = versionNumber.toString()

        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "edu.aku.hassannaqvi.dss_matiari"
            versionCode versionBuild
            versionName "${versionNumber}.${versionPatch}${versionType}"
            minSdkVersion 22
            targetSdkVersion 31
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->

                def appName = rootProject.name
                def date = new Date()
                def formattedDate = date.format('yyyy_MM_dd')

                def outputDir = new File("${project.buildDir.absolutePath}/outputs/apk/${variant.flavorName}/${variant.buildType.name}")
                //def outputFileName = "app-${variant.flavorName}-${variant.buildType.name}.apk"
                def outputFileName = "${appName}_${formattedDate}_${versionType}v${versionBuild}.apk"
                // def outputFile = new File("$outputDir/$outputFileName")
                variant.packageApplicationProvider.get().outputDirectory = new File("$outputDir")
                output.outputFileName = outputFileName
                *//*  if (outputFileName != null && outputFileName.endsWith('.apk')) {
                      //output.outputFileName = outputFileName
                      output.outputFileName = new File("${project.buildDir.absolutePath}/outputs/apk/", "${outputDir}-${versionMajor}.${versionMinor}.${versionPatch}-${outputFileName}")
                  }*//*

            }
        }

    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            resValue("string", "DB_PASSWORD_HDSS_Matiari.db", "L@OTHinSh@oulde3")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility "1.8"
    }
}*/

/* NEW STRUCT */

android {
    namespace 'edu.aku.hassannaqvi.dss_matiari'
    compileSdk 32

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        // Flag to enable support for the new language APIs
//        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        dataBinding true
        viewBinding true
    }

    // For dynamic version change on build
    Properties versionProps = new Properties()
    def versionPropsFile = file('version.properties')

    //Create a version properties file and add required properties with default values
    if (!versionPropsFile.exists()) {
        versionProps['VERSION_NUMBER'] = "1"
        versionProps['VERSION_BUILD'] = "0"
        versionProps['VERSION_PATCH'] = "0"
        versionProps.store(versionPropsFile.newWriter(), null)
    }

    // Read existing
    if (versionPropsFile.canRead()) {
        versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

        def value = 0
        def versionType = "D"

        def runTasks = gradle.startParameter.taskNames
        if ('assemble' in runTasks || ':app:assembleRelease' in runTasks || 'aR' in runTasks) {
            value = 1
            versionType = "R"
        }

        def versionNumber = versionProps['VERSION_NUMBER'].toInteger()
        def versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + value

        versionProps['VERSION_NUMBER'] = versionNumber.toString()
        versionProps['VERSION_BUILD'] = versionBuild.toString()
        versionProps['VERSION_PATCH'] = versionPatch.toString()

        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId "edu.aku.hassannaqvi.dss_matiari"
            minSdk 22
            targetSdk 32
            versionCode versionBuild
            versionName "${versionNumber}.${versionPatch}${versionType}"

            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

            // Change this key when certificate will update on server
           /* buildConfigField "String", "CERT_KEY", "\"sha256/Mt8PYrwhBQY4VjT8sYcyvPwmbXKsO+WmPrPrs85VGSg=\""*/
            buildConfigField "String", "CERT_KEY", "\"sha256/Wec45nQiFwKvHtuHxSAMGkt19k+uPSw9JlEkxhvYPHk=\""
            buildConfigField "String", "CERT_KEY_BACKUP", "\"sha256/RQeZkB42znUfsDIIFWIRiYEcKl7nHwNFwWCrnMMJbVc=\""

            // For writing room db schema
            javaCompileOptions {
                annotationProcessorOptions {
                    arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
                }
            }
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->

                def appName = rootProject.name
                def date = new Date()
                def formattedDate = date.format('yyyy_MM_dd')

                def outputFileName = "${appName}_${formattedDate}_${versionType}v${versionBuild}.apk"
                def defaultOutputDir = variant.packageApplicationProvider.get().outputDirectory
                output.outputFileName = new File("$defaultOutputDir/$outputFileName").name
            }
        }

    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.room:room-ktx:2.4.3'
    //noinspection LifecycleAnnotationProcessorWithJava8
    implementation 'androidx.lifecycle:lifecycle-compiler:2.5.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation 'com.google.code.gson:gson:2.9.1'
    implementation 'com.github.amitshekhariitbhu.Android-Debug-Database:debug-db:v1.0.6'


    // Households Validator
    implementation 'com.github.AliAzaz:AndroidValidatorCrawler:1.0.3'

    // Some string
    api 'org.apache.commons:commons-lang3:3.12.0'

    // EditText Picker (Ali)
    implementation 'com.github.AliAzaz:Edittext-Library:2.0.0'
    //Image Compressor
    implementation 'id.zelory:compressor:3.0.1'

    // Datepicker
    implementation 'com.github.BlackBoxVision:datetimepicker-edittext:v0.4.0'

    def work_version = '2.7.0'

    // WorkManager(Java only)
    //noinspection GradleDependency
    implementation "androidx.work:work-runtime:$work_version"

    //Image Compressor
    implementation 'id.zelory:compressor:3.0.1'

    // Permissions Handeling
    implementation 'com.karumi:dexter:6.2.3'

    // for Debug Database
    //debugImplementation 'com.amitshekhar.android:debug-db:1.0.6'

    // Sqlcipher
    implementation "net.zetetic:android-database-sqlcipher:4.5.1"
    implementation "androidx.sqlite:sqlite-ktx:2.2.0"
    implementation "androidx.sqlite:sqlite:2.2.0"

    // Room
    def room_version = "2.4.3"
    implementation "androidx.room:room-runtime:$room_version"
    kapt("androidx.room:room-compiler:$room_version")
    implementation 'com.wajahatkarim:roomexplorer:1.0.1'

    implementation 'androidx.recyclerview:recyclerview:1.2.1'


    //Rooted
    implementation 'com.scottyab:rootbeer-lib:0.1.0'

    implementation 'com.google.guava:guava:29.0-android'



    // Flipper
    debugImplementation 'com.facebook.flipper:flipper:0.173.0'
    debugImplementation 'com.facebook.soloader:soloader:0.10.4'
    releaseImplementation 'com.facebook.flipper:flipper-noop:0.173.0'
    releaseImplementation "com.facebook.flipper:flipper-noop:0.173.0"
    releaseImplementation "com.github.theGlenn:flipper-android-no-op:0.8.0"

    // For Responsiveness
    implementation 'com.intuit.sdp:sdp-android:1.0.6'
    implementation 'com.intuit.ssp:ssp-android:1.1.0'

    // Import the Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:31.1.1')

    // Add the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'

    /* NEW STRUCT */

    // For Web Service Call
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:converter-scalars:2.1.0'

    // For Web Service Logging
    implementation 'com.squareup.okhttp3:logging-interceptor:4.4.1'

    // For SnackBar
    implementation 'com.github.matecode:Snacky:1.1.5'

    // For Loading
    implementation 'com.github.ybq:Android-SpinKit:1.4.0'

}

